buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}//쿼리  dsl 추가 설정 p448

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.7'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'org.mbc'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    /*메이븐 리포지토리에서 코드를 가져와 코끼리를 누르면 가져온다.*/

    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'  /*프론트 관련 */
    // 프론트 레이아웃 관련 p428 https://mvnrepository.com/artifact/nz.net.ultraq.thymeleaf/thymeleaf-layout-dialect
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.1.0'

    implementation 'org.springframework.boot:spring-boot-starter-web'        /*spring web*/
    compileOnly 'org.projectlombok:lombok'                                             /*lombok*/
    annotationProcessor 'org.projectlombok:lombok'                                  /*lombok*/
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    /*엔티티와 dto 변환 처리 */
    // https://mvnrepository.com/artifact/org.modelmapper/modelmapper
    implementation 'org.modelmapper:modelmapper:3.1.0'
    // 과거엔 엔티티를 .dto로 변화 하거나 또는 반대로 해서 사용 했어야 함
    // 프로젝트에 config 환경설정용 패키지 클래스를 만들고 Rootconfig  클래스를 만들어서 사용 한다


    developmentOnly 'org.springframework.boot:spring-boot-devtools'           /*부트 개발용*/



    //application에서 설정
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'                              /*마리아db 드라이버*/
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'   /*데이터베이스 관련 외부 라이브러리*/


    testImplementation 'org.springframework.boot:spring-boot-starter-test'   /*테스트juint 메서드단위 테스트*/
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'                 /*junit용 코드*/
    // 쿼리dsl 문구 추가 p448 6행 추가
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"


    annotationProcessor(
            "jakarta.persistence:jakarta.persistence-api",
            "jakarta.annotation:jakarta.annotation-api",
            "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta")

}

tasks.named('test') {
    useJUnitPlatform()
}

sourceSets {

    main {
        java {
            srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
        }
    }
}
// 쿼리 dsl 사용법 오른쪽에 있는 gradle 메뉴 열고 other 찾아서 compile.java 실행
// 하단에 compile 가 뜬다 -> 왼쪽 탐색기 -> generated -> main -> domain -> Q로 시작하는 클래스가 있다.
// dsl용 객체 커스텀 X
// 주의사항 : 엔티티,DTO 를 건들면 Qdomain 을 다시 생성해야함.
// 건들었다면 미스매치남 오른쪽 그레이드 빌드에 클린 실행후 컴파일자바 다시 실행  하면 삭제 후 다시 생성됨
compileJava.dependsOn('clean')
